var http = require('http')
	, $ = require('jquery')
	, dist = require('GeoDistance');

function busMapError(req, res, error) {
	res.render('bus/error', {
			   title: 'Bus Map',
			   errorCode: error
	});
};

module.exports.countdown = function (req, res, stopID) {
	var countdownOpt = {
		host: 'countdown.tfl.gov.uk',
		path: '/stopBoard/' + stopID,
		method: 'GET',
		port: 80 
	};
	// Gather Countdown of Bus Stop selected by user
	http.request(countdownOpt).on('response', function(response) {
		// Retrieve data
		var data = '';
		response.on("data", function(chunk) {
			data += chunk.toString('utf8');
		});
		response.on("end", function() {
			info = JSON.parse(data);
			// Check if their is any error messages for Bus Stop
			if(info.serviceDisruptions.criticalMessages == '') {
				var output = "<br /><table width=\"100%\" style=\"text-align: center;\"><th>Number</th><th>Destination<th>Wait</th>";
				if (info.arrivals == '') {
					output = '<div style=\'text-align: center;\'>No data currently avalaible.</div>';
				}
				$.each(info.arrivals, function(i, bus) {
					output += "<tr style='font-weight: normal'>";
					output += "<td>" + bus.routeId + "</td>";
					output += "<td>" + bus.destination + "</td>";
					output += "<td>" + bus.estimatedWait + "</td>"
					output += "</tr>";
				});
				output += "</table>";
			
			} else {
				output += info.serviceDisruptions.criticalMessages;
			}
			// Send the Data to User
			res.send(output);
		});
	}).end();
};

module.exports.busStops = function (req, res) {
	if (req.body.geoLat != undefined) {
		var swLat, swLng, neLat, neLng;
		swLat = Number(req.body.geoLat) - 0.01;
		swLng = Number(req.body.geoLng) - 0.01;
		neLat = Number(req.body.geoLat) + 0.01;
		neLng = Number(req.body.geoLng) + 0.01;
		Stops(swLat, swLng, neLat, neLng, req.body.geoLat, req.body.geoLng);
	} else {
		var pCode = { 
			host: 'maps.googleapis.com',
			path: '/maps/api/geocode/json?address=' + req.body.postCode.replace(/ /g, '') + '&sensor=true'
		};
		http.request(pCode).on('response', function(response) {
			var data = '';
			response.on("data", function (chunk) {
				data += chunk;
			});
			response.on('end', function () {
				var swLat, swLng, neLat, neLng, pcData, pcGeom, pcLat, pcLng;
				pcData = JSON.parse(data)
				// Check that the Postcode entered is correct
				if (pcData.results[0] == undefined) {
					var errorCode = 'Sorry but the Postcode you entered could not be found please ensure that the Postcode is correct.';
					busMapError(req, res, errorCode);
				}
				else {
					pcGeom = pcData.results[0].geometry;
					// Get Longitutde and Latitude from Post Code
					pcLat = pcGeom.location.lat;
					pcLng = pcGeom.location.lng;
					// Create SW & NE lng lats
					swLat = Number(pcLat) - 0.01;
					swLng = Number(pcLng) - 0.01;
					neLat = Number(pcLat) + 0.01;
					neLng = Number(pcLng) + 0.01;
					Stops(swLat, swLng, neLat, neLng, pcLat, pcLng);
				}
			});
		}).end();
	}
	function Stops(swLat, swLng, neLat, neLng, funcGeoLat, funGeoLng) {
		var geoLat = Number(funcGeoLat);
		var geoLng = Number(funGeoLng);
		var countdown = {
			host: 'countdown.tfl.gov.uk',
			path: '/markers/swLat/' + swLat + '/swLng/' + swLng + '/neLat/' + neLat + '/neLng/' + neLng + '/'
			};
		http.request(countdown).on('response', function(response) {
			// Gather information from Local Bus Stops
			var data = '';
			response.on("data", function (chunk) {
				data += chunk.toString('utf8');
			});
			response.on("end", function() {
				if ( data.indexOf("<html") >=0 ) {
					var errorCode = 'Sorry but either there was an error with your request or the TFL bus countdown service is currently down.'
					busMapError(req, res, errorCode);
				} else {
					var stops = JSON.parse(data);
					busStop = new Array();
					routeArray = new Array();
					// Split Local Bus Stops and create array
					$.each(stops.markers, function(i, item) {
						var busLng = item.lng;
						var busLat = item.lat;
						var stopGeo = busLat + ", " + busLng;
						var Distance = dist.getDistance(busLat, busLng, geoLat, geoLng);
						// Retrieve all of the bus's for this stop
						var busNumsStr = '';
						var busNums = new Array();
						$.each(item.routes, function(x, y) {
							if (x == item.routes.length-1) { busNumsStr += item.routes[x].name; }
							else { busNumsStr += item.routes[x].name + ", "; } 
							busNums[x]  = item.routes[x].name;
						});
						// Create Bus Array
						bus = ({name: item.name, id: item.id, towards: item.towards, distance: Distance, towards: item.towards, route: busNums, routeStr: busNumsStr, geo: stopGeo});
						busStop[i] = bus;	
					});
					// Sort the Bus Array by Distance
					busStop.sort(function(a, b) {
						var a1= a.distance, b1= b.distance;
						if(a1== b1) return 0;
						return a1> b1? 1: -1;
					});
					// Retrieve the closest 15 Bus Stops to the user
					stops = new Array();
					$.each(busStop, function(i, item) {
						if (i < 11) { 
							stops[i] = busStop[i];
							// Add Bus numbers to route array
							$.each(item.route, function(x, y) {
								routeArray[x] = y;
							});
						}
						else { return false }
					});
					// Display nearest bus stops on page
					res.render('bus/map', {
						title: 'Bus Stop Map',
						LatLng: geoLat + ", " + geoLng,
						markers: stops,
						routes: $.unique(routeArray)
					});
				}
			});
		}).end();
	}
};